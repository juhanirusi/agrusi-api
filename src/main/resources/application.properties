#------------|
# PostgreSQL |
#------------|

spring.datasource.url=jdbc:postgresql://localhost:5432/agrusi
spring.datasource.username=postgres
spring.datasource.password=Q2werty

#-----------|
# Hibernate |
#-----------|

# Get a good overview of all the database operations Hibernate performs

spring.jpa.properties.hibernate.generate_statistics=true
logging.level.root=INFO
logging.level.org.hibernate.stat=DEBUG
logging.level.org.hibernate.SQL=DEBUG


# Show / format generated SQL on terminal

spring.jpa.show=true
spring.jpa.properties.hibernate.format_sql=true

# Tells Hibernate to create the database tables (update db schema)
# if they don't already exist...

# USEFUL IN DEVELOPMENT, IN PRODUCTION, IT'S OFTEN RECOMMENDED TO
# USE MORE CONTROLLED APPROACHES AND MANAGE DATABASE SCHEMA
# CHANGES MANUALLY OR THROUGH A DATABASE MIGRATION TOOL!

spring.jpa.hibernate.ddl-auto=update

# Add initial data to database and run schema.sql on application start

spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:schema.sql
spring.sql.init.data-locations=classpath:data.sql

spring.jpa.hibernate.use-new-id-generator-mappings=true

#------------|
# Spring DEV |
#------------|

spring.main.banner-mode=off

spring.output.ansi.enabled=ALWAYS


# Spring Security username/password and logging

spring.security.user.name=admin
spring.security.user.password=admin

# logging.level.org.springframework.security=DEBUG


# Save logs to a file...

logging.file.name=src/main/resources/logging.log


# 1. Add logging configs to display SQL statements
# 2. To see actual values being assigned for the SQL statements

logging.level.org.hibernate.orm.jdbc.bind=trace
